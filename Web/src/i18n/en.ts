import Translation from './base';

const en: Translation = {
  commons: {
    search: 'Search',
    loading: 'Loading...',
    fillAllFields: 'Fill all fields',
    cancel: 'Cancel',
    save: 'Save',
    currentPath: 'Current Path',
    params: 'Parameters',
    selectOption: (label: string) => `Select the option for ${label}`,
    default: 'Default',
    gohome: 'Go to home',
  },
  timeline: {
    title: 'Timeline',
    balance: 'Balance',
    clearFilter: 'Show all',
    registryCount: 'Records',
    filters: 'Filters',
    from: 'From',
    to: 'To',
    apply: 'Apply',
    importOfx: 'Import OFX',
    importOfxTitle: 'Import OFX statement',
    importOfxAccountOption: 'Bank account',
    importOfxCreditOption: 'Credit card',
    importOfxAccountLabel: 'Account to post',
    importOfxCardLabel: 'Card to post',
    importOfxFileLabel: 'OFX file',
    importOfxLoaded: (count: number) => `${count} transactions loaded`,
    importOfxNoTransactions: 'No transactions were found in the file.',
    importOfxImport: 'Import',
    importOfxError: 'We could not process the OFX file.',
    importOfxSuccess: 'Transactions imported successfully.',
  },
  registry: {
    title: 'Registry',
    description: 'Description',
    value: 'Value',
    date: 'Date',
    account: 'Account',
    paid: 'Paid',
    messages: {
      saved: 'Saved successfully',
    }
  },
  accounts: {
    title: 'Accounts',
    showArchived: 'Show Archived',
    noAccounts: 'There is no account registered yet.',
    addAccount: 'Add Account',
    editAccount: 'Edit Account',
    accountName: 'Account Name',
    bank: 'Bank',
    initialBalance: 'Initial Balance',
    accountColor: 'Account Color',
    includeInTotal: 'Include in Total',
    accountUpdated: 'Account updated successfully',
    accountCreated: 'Account created successfully',
    types: {
      label: 'Types',
      current: 'Current',
      savings: 'Savings',
      investment: 'Investment',
      cash: 'Cash',
    },
  },
  creditcards: {
    title: 'Credit Cards',
    noCreditCards: 'There is no credit card registered yet.',
    addCreditCard: 'Add Credit Card',
    selectedInvoice: 'Selected Invoice',
    editCreditCard: 'Edit Credit Card',
    cardName: 'Card Name',
    brand: 'Brand',
    limit: 'Limit',
    account: 'Account',
    closingDay: 'Closing Day',
    dueDay: 'Due Day',
    creditCardCreated: 'Credit card saved',
    creditCardUpdated: 'Credit card updated',
  },
  categories: {
    title: 'Categories',
    addCategory: 'Add Category',
    categoryName: 'Category Name',
    parentCategory: 'Parent Category',
    categoryCreated: 'Category created successfully',
  },
  groceries: {
    title: 'Groceries',
    addItem: 'Add Item',
    editItem: 'Edit Item',
    name: 'Name',
    barcode: 'Barcode',
    expirationDate: 'Expiration Date',
    quantity: 'Quantity',
    unit: 'Unit',
    paidPrice: 'Paid Price',
    purchaseDate: 'Purchase Date',
    storageLocation: 'Location',
    scanBarcode: 'Scan Barcode',
    itemCreated: 'Item saved',
    productCreated: 'Product saved',
    expired: 'Expired',
    expiringSoon: 'Expiring Soon',
    thisWeek: 'This Week',
    thisMonth: 'This Month',
    valid: 'Valid',
  },
  login: {
    loginWithGoogle: 'Login with Google',
    loginWithApple: 'Login with Apple ID',
  },
  settings: {
    title: 'Settings',
    data: 'Data',
    myData: 'My Data',
    exportData: 'Export My Data',
    exportingData: (filename: string, current: string, max: string) =>
      `Exporting ${filename} (${current}/${max})%`,
    auth: 'Auth',
    logout: 'Logout',
    clearLocalCaches: 'Clear local caches',
    resetOnboarding: 'Reset onboarding',
    theme: 'Theme',
    density: 'Density',
    loadingDatabaseUsage: 'Loading database usage...',
    language: 'Language',
    toggleEncryption: (disabled: boolean) => disabled ? 'Enable Encryption (DEV only)' : 'Disable Encryption (DEV only)',
    resavingWithEncryption: (filename: string, current: string, max: string) => `Resaving ${filename} (${current}/${max})...`,
    timelineMode: 'Timeline mode',
    timelineModeStart: 'Start',
    timelineModeNext: 'Next',
    timelineCutoffDay: 'Cut-off day',
    appVersion: 'App version',
    checkUpdates: 'Check for updates',
    checkingUpdates: 'Checking for updates...',
    newUpdateAvailable: 'A new version is available',
    installUpdate: 'Reload to update',
    upToDate: 'You are on the latest version',
    offlineReady: 'Available offline',
  },
  dashboard: {
    title: 'Dashboard',
    messages: {
      hello: 'Hello',
      otherThings: 'Other things',
      ideasWelcome: 'Ideas are welcome',
    },
  },
  speech: {
    title: 'Grocery Items',
    howToUseTitle: 'How to use',
    intro1: 'Speak naturally about groceries you already have and those you still need to buy. The assistant will understand your phrases to add, remove or update items and will separate owned items from your shopping list.',
    intro2: 'You can mention the name, expiration, whether it is opened/in use, quantity, how much you paid, where it is stored, etc.',
    examplesTitle: 'Examples:',
    examples: [
      'I need to buy eggs and milk',
      'I bought 2 packs of rice',
      'I have 3 packs of pasta in the cabinet',
      'I have ham and cheese opened in the fridge and they will spoil in 3 days',
      'The coffee package expires in 2 months',
      'I have no more beans'
    ],
    micStart: 'Start listening',
    micStop: 'Stop listening',
    placeholderListeningHasItems: 'Feel free to talk',
    placeholderListeningNoItems: 'Start speaking',
    placeholderNotListening: 'Press the button to speak',
    haveListTitle: 'Have',
    toBuyListTitle: 'To Buy',
    browserNotSupported: 'Browser does not support speech recognition.',
    changeLangTooltip: 'Click to change the language',
    tokensUsed: (tokens: number, price: string) => `Used: ${tokens} Tokens, R$ ${price}`
  },
  aiMic: {
    onboarding: {
      info: {
        title: 'Speech recognition test',
        p1: 'The speech recognition used in the app is native and depends on your device compatibility.',
        p2: "Let’s run a quick test to make sure everything is working.",
      },
      lang: {
        title: 'Confirm the language',
        p1: 'Make sure the app language is correct and that your spoken language matches the one configured on your device.',
      },
      verification: {
        title: 'Repeat the phrase',
        instructions: 'Say the phrase shown below so we can validate the speech recognition.',
        retry: 'We could not match it, please try again.',
        success: 'Great! Moving on to the next phrase.',
        waiting: 'Waiting for you to speak…',
        targetLabel: 'Expected phrase',
        transcriptLabel: 'Transcript',
        scoreLabel: 'Score',
      },
      progress: (passed: number, target: number) => `${passed} of ${target}`,
      success: {
        title: 'All set!',
        p1: 'Your device is compatible with speech recognition.',
      },
      fail: {
        title: 'Could not validate',
        p1: 'We were not able to confirm speech recognition compatibility right now.',
      },
      actions: {
        start: 'Start test',
        confirm: 'Confirm language',
        back: 'Back',
        imDone: "I'm done",
        tryAgain: 'Try again',
        close: 'Close',
      },
    },
    onboardingCases: () => [
      'Testing a transfer of twelve reais from the salary account into savings.',
      'Voice test for the amount R$ 20,00 recorded as a quick expense.',
      'Second test saying only twenty reais to see if it works without the symbol.',
      'Say transfer twelve BRL to the reserve account to confirm currency code handling.',
      'Request moving fifty USD from checking to the travel fund and confirm the USD keyword.',
      'Try adding a debit of thirty euros to groceries to observe multi-currency support.',
      'Dictate logging a seventy-five dollar cash withdrawal with note ATM B3 to check amount plus note.',
      'Pronounce pay the USB subscription and watch for confusion with USD.',
      'Say register a reimbursement of one hundred twenty Mexican pesos to cover foreign currencies.',
      'Speak search accounts for customer Maria da Silva to stress full name recognition.',
      'Ask show Visa corporate card limit in BRL mixing languages on purpose.',
      'Command generate a report comparing credit versus debit totals for April to test reporting.',
      'Try mark invoice two zero four five as paid in dollars to validate spoken digits.',
      'Say capture recurring payment of R$ 99,90 for Spotify to verify decimal amounts.',
      'Experiment with convert two hundred BRL to USD and log the difference to stress conversions.',
    ],
  },
  recurrent: {
    title: 'Recurring entries',
    empty: 'No recurring entries found.',
    day: 'Day of month',
    next: 'Next run',
    typeMonthly: 'Monthly',
  }
};

export default en;
